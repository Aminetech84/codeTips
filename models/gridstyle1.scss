/* css way to create variables
to change it, rewrite it
a {
  //usage
  color: var(--text-color);
}
:root {
  --text-color: red;
}*/

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* flex container *parent element* */
.parent {
  display: grid;

  /* Optional properties for grid container*/
  /*
display: grid;
    grid-template-columns: ;
    grid-template-rows: ;
    grid-gap: ;
    grid-auto-rows: ;
    grid-auto-columns: ;
    grid-template-areas: ;
    justify-content: ;
    align-items: ;
    */
}
.child {
  /* Optional properies for grid item *child of grid* */
  /*
    grid-column: ;
    grid-row: ;
    grid-area: ;
    align-self: ;
    justify-self: ;
    */
  display: grid;
}

div {
  border: 0.2ch solid #ee4785;
}

.container {
  background: #000;
  color: #fff;
  width: 100%;
  min-height: 100vh;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); //to ger responsive 
//grid-template-rows: repeat(auto-fill, minmax(250px, 1fr));
  //grid-template-columns: 22% 22% 22% ; // create columns, the number of values passed represent the number of columns created, and their size.

 /* grid-template-areas: 
  'header header header'
  'nav main sidebar'
  'nav footer';*/ // works with grid-template-columns and grid-template-rows, the name repetion is meaning of spreading // refrence , crash course travisy media for grid
  //grid-template-columns: repeat(3, 1fr); //values for columns can be put in diffrent units or mixed ways of defining them.
// grid-template-columns: repeat(auto-fill, minmax(200px, 1fr)); //to ger responsive 
//width: clamp(200px, 50%, 600px); //(min, preferred, max).

//justify-content: center; // just like flexbox

// align-items: ; //just like flexbox

//gap: ; // works as a margin, work also in flexbox

//grid-auto-flow: column; // get contant to fill the width, just like flexbox do by default

//grid-auto-rows: minmax(10em, auto); //sets the height od columns, can work as height or if used with minmax(), can be as a min-height

// grid-template-rows: ; // works the same as grid-template-columns, the height is the height of the rows is the hight of the row with the most contant.

.a {
  // max-width: 5em;
  // height: 5rem;
  display: flex;
  justify-content: center;
  align-items: center;
  // align-self: ; //just like flexbox
  //justify-self: ; // just like align-self
  
  &:nth-child(1) {
    /* spread a column to go over more columns
    // same way with 
    grid-row-start: ;
    grid-row-end: ;
    grid-row: ;
    ****************
    grid-column-start: 1;
    grid-column-end: 4; // number should be bigger than 2
    grid-column: 1 / 3; //shorter way*/
    }
  }
}
